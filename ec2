#!/bin/bash

#todo 
#retourner ordre des vars dans jq
#avoir un cache des VM existantes pour accélérer
#corriger affichage tags, qui filtrent mal
#startup, avec couches de démarrage

function listregions
{
	echo "eu-central-1 eu-west-1 eu-west-2"
	#/usr/local/bin/aws ec2 describe-regions --output text | cut -f3
}

function paramsjq
{
	echo '.Reservations[] | ( .Instances[] | {private: .PrivateIpAddress, public: .PublicIpAddress, state: .State.Name, type: .InstanceType, key: .KeyName, app: ( (.Tags // [{Key:"Name", Value:""}])[] | select(.Key == "Name") | .Value ) })'
}

function listinstances
{
	/usr/local/bin/aws ec2 describe-instances --filters "Name=tag:Name,Values=*$filter*" --region $region | jq -c --raw-output '.Reservations[] | ( .Instances[] | { id: .InstanceId, lib: ( (.Tags // [{Key:"Name", Value:""}])[] | select(.Key == "Name") | .Value ) })' | sed -e 's/"//g' -e 's/.*id://g' -e 's/,lib//g' -e 's/}//'
}

function GetListEC2
{
	local region=$1
	local state=$2
	local filter=$3

	if [ -z "$filter" ]; then 
		/usr/local/bin/aws ec2 describe-instances --filters "Name=instance-state-name,Values=$state" --region $region | jq --compact-output "$(paramsjq)"
	else
		/usr/local/bin/aws ec2 describe-instances --filters "Name=instance-state-name,Values=$state" "Name=tag:Name,Values=*$filter*" --region $region | jq --compact-output "$(paramsjq)"
	fi
}

function ExecOnInstance
{
	local region=$1
	local action=$2
	local id=$3

	json=$(/usr/local/bin/aws ec2 $action --instance-ids $id --region $region)
	case $action in 
	stop-instances) label='.StoppingInstances';;
	start-instances) label='.StartingInstances';;
	*) echo "action $action inconnue"; exit 1
	esac

	echo "$(echo $json |jq $label'[0].PreviousState.Name') => $(echo $json |jq $label'[0].CurrentState.Name')" | sed 's/\"//g'
}

filter=$2

case $1 in
install)
	sudo apt-get install jq
	;;

stop)
	if [ -z "$filter" ]; then
		echo "$0 stop filtre"
		exit 1
	fi

	for region in $(listregions); do
		liste=$(listinstances)
		for vm in $liste; do 
			id=$(echo $vm | cut -d: -f1)
			label=$(echo $vm | cut -d: -f2)
			echo "arrêt $label dans $region : $(ExecOnInstance $region 'stop-instances' $id)"
		done
	done
	;;

start)
	if [ -z "$filter" ]; then
		echo "$0 stop filtre"
		exit 1
	fi

	for region in $(listregions); do
		liste=$(listinstances)
		for vm in $liste; do 
			id=$(echo $vm | cut -d: -f1)
			label=$(echo $vm | cut -d: -f2)
			echo "démarrage $label dans $region : $(ExecOnInstance $region 'start-instances' $id)"
		done
	done
	;;

restart)
	if [ -z "$filter" ]; then
		echo "$0 stop filtre"
		exit 1
	fi

	for region in $(listregions); do
		liste=$(listinstances)
		for vm in $liste; do 
			id=$(echo $vm | cut -d: -f1)
			label=$(echo $vm | cut -d: -f2)

			echo "arrêt $label dans $region : $(ExecOnInstance $region 'stop-instances' $id)"
			ec2 wait $label stopping
			echo "démarrage $label dans $region : $(ExecOnInstance $region 'start-instances' $id)"
		done
	done
	;;

running)
	for region in $(listregions); do
		echo -e "\nListing Instances in region:'$region'..."
		GetListEC2 $region running $filter
	done
	;;

stopped)
	for region in $(listregions); do
		echo -e "\nListing Instances in region:'$region'..."
 		GetListEC2 $region stopped $filter
	done
	;;

list)
	for region in $(listregions); do
		echo -e "\nListing Instances in region:'$region'..."
		GetListEC2 $region "*" $filter
	done
	;;

wait)
	state=$3
	if [ -z "$filter" ]||[ -z "$state" ]; then
		echo "$0 wait filtre state"
		exit 1
	fi

	nb=100
	while [ $nb -gt 0 ]; do
        nb=$(ec2 list "$filter" | grep $state |wc -l)
        if [ $nb -gt 0 ]; then 
        	echo "attente ($nb)"
        	sleep 15
        fi
	done
	;;

*) 
	echo "$0 install"
	echo "$0 running|stopped|list [filtre optionnel]"
	echo "$0 stop OSEA-dev"
	echo "$0 stop OSEA-form"
	echo "$0 stop GLASS"
	echo "$0 stop|start LABBOOK_build_iso"
esac
